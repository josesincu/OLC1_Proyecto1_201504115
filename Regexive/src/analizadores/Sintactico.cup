/**
 *
 * @author dark
 */

package analizadores; 
import arbol.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;

//import java_cup.runtime.*;
import java_cup.runtime.*;

parser code 
{:
     //mis variables
      public static Anulabilidad nodo_datos = new Anulabilidad();
     //-------------------------------------
     
     public static String nombre_dot= "-1";
     public static int numera_hoja = 0;
     public static int contId=1;
     public static Nodo Raiz;
    
     public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("src//imagenes//" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=record]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
          
            String dotPath="dot";
            //dirección del archivo dot
            String fileInputPath = "src//imagenes//"+ nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "src//imagenes//" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            //dot -Tjpg filename.dot -o outfile.jpg


            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }





//---------------------------------------------------    
/**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Fila " + (s.right) +" Columna "+s.left+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.right)+ " Columna "+s.left+". Componente " + s.value + " no reconocido."); 
    }  
    
   
:} 



//EXPRESIONES REGULARES
terminal String CADENA;
terminal String IDENTIFICADOR;
terminal String RLETRAMIN;
terminal String RLETRAMAY;
terminal String RNUMERO;
terminal String SPECIAL1;
terminal String SPECIAL2;
terminal String SPECIAL3;


terminal String RCONJ;
//terminal String ESPACIO;
terminal String ADMI;
terminal String COMILLA;
terminal String NUME;
terminal String DOLAR;
terminal String DPORCENTAJE;
terminal String ANDD;
terminal String COMSIMPLE;
terminal String PABIERTA;
terminal String PCERRADA;
terminal String POR;
terminal String MAS;
terminal String COMA;
terminal String MENOS;
terminal String CONCAT;
terminal String DIV;
terminal String DOSPUNTOS;
terminal String PTCOMA;
terminal String MENOR;
terminal String IGUAL;
terminal String FLECHA;
terminal String INTER;
terminal String ARROBA;
terminal String CORABIERTO;
terminal String BARINVERTIDA;
terminal String CORCERRADO;
terminal String POTENCIA;
terminal String GBAJO;
terminal String LLAVEIZQ;
terminal String OR;
terminal String LLAVEDER;
terminal String ALCANCE;

non terminal Nodo instrucciones;
non terminal Nodo bloque;
non terminal Nodo expresion_regular;


non terminal Nodo letras_min;
non terminal Nodo letras_may;
non terminal Nodo lista_numeros;
non terminal Nodo simbolos;
//non terminal Nodo comprobar;

//Operaciones con expresiones 
precedence left INTER;
precedence left MAS;
precedence left POR;
precedence left OR;
precedence left CONCAT;



start with bloque; 

bloque::= LLAVEIZQ instrucciones:a LLAVEDER {::}
;

instrucciones ::= 
    RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RLETRAMIN ALCANCE RLETRAMIN PTCOMA
    |instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RLETRAMIN ALCANCE RLETRAMIN PTCOMA //a~z
    |RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RLETRAMAY ALCANCE RLETRAMAY PTCOMA
    |instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RLETRAMAY ALCANCE RLETRAMAY PTCOMA //A~Z
    |RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RNUMERO ALCANCE RNUMERO PTCOMA
    |instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RNUMERO ALCANCE RNUMERO PTCOMA //1~9
    |RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA simbolos ALCANCE simbolos PTCOMA
    |instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA simbolos ALCANCE simbolos PTCOMA //!~&
    |RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA letras_min PTCOMA
    |instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA letras_min PTCOMA // a,b,c,d,e
    |RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA letras_may PTCOMA
    |instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA letras_may PTCOMA //A,B,C,D
    |RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA lista_numeros PTCOMA
    |instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA lista_numeros PTCOMA //1,2,3
    |IDENTIFICADOR:a MENOS FLECHA expresion_regular:b PTCOMA 
    {:
            parser.nombre_dot=a;
            parser.numera_hoja++;
            Nodo aceptacion = new Nodo(null,null, "#", parser.contId+2,parser.numera_hoja,"N");
            Nodo concatenacion = new Nodo(b,aceptacion, ".", parser.contId+1);
            nodo_datos.llenar_datos_concatenacion(concatenacion,b,aceptacion);
            
            
            
            //parser.Raiz = concatenacion;
            System.out.println("Aqui en primer: Nomde_dot=: "+parser.nombre_dot);
            graficarArbol(concatenacion,parser.nombre_dot);
            parser.contId =0;
            parser.numera_hoja =0;
            //parser.nombre_dot = "";
            RESULT=concatenacion;
     
            // System.out.println("Nomde_dot=: "+parser.nombre_dot);
            //RESULT=b;
    
    :}
    |instrucciones IDENTIFICADOR:a MENOS FLECHA expresion_regular:b PTCOMA  // expresion regular .{letra}{numero}
    {:
            parser.nombre_dot=a;
            parser.numera_hoja++;
            Nodo aceptacion = new Nodo(null,null, "#", parser.contId+2,parser.numera_hoja,"N");
            Nodo concatenacion = new Nodo(b,aceptacion, ".", parser.contId+1);
            nodo_datos.llenar_datos_concatenacion(concatenacion,b,aceptacion);
            
            
            
            //parser.Raiz = concatenacion;
            System.out.println("Aqui en primer: Nomde_dot=: "+parser.nombre_dot);
            graficarArbol(concatenacion,parser.nombre_dot);
            parser.contId =0;
            parser.numera_hoja =0;
            //parser.nombre_dot = "";
            RESULT=concatenacion;
     
            // System.out.println("Nomde_dot=: "+parser.nombre_dot);
            //RESULT=b;
    :}
    |instrucciones DPORCENTAJE DPORCENTAJE DPORCENTAJE DPORCENTAJE // % % % %
    |IDENTIFICADOR DOSPUNTOS CADENA PTCOMA 
    |instrucciones IDENTIFICADOR DOSPUNTOS CADENA PTCOMA  //nombre_expresion : cadena
    |error

; 

letras_min::= letras_min COMA RLETRAMIN 
              |RLETRAMIN
                   
;

letras_may::= letras_may COMA RLETRAMAY
              |RLETRAMAY
                   
;
lista_numeros::= lista_numeros COMA RNUMERO
              |RNUMERO                  
;
simbolos::=
     // ESPACIO
     ADMI
    |COMILLA
    |NUME
    |DOLAR
    |DPORCENTAJE
    |ANDD
    |COMSIMPLE
    |PABIERTA
    |PCERRADA
    |POR
    //|MAS
    |COMA
    |MENOS
    //|CONCAT
    |DIV
    |DOSPUNTOS
    |PTCOMA
    |MENOR
    |IGUAL
    |FLECHA
    |INTER
    |ARROBA
    |CORABIERTO
    |BARINVERTIDA
    |CORCERRADO
    |POTENCIA
    |GBAJO
    |LLAVEIZQ
    |OR
    |LLAVEDER
    |ALCANCE

;

expresion_regular::=
    //| {letra} {digito};
    OR:c expresion_regular:a expresion_regular:b 
    {:
        //Expresion a|b;
                Nodo nuevaOr = new Nodo(a, b, "\\|", parser.contId);
                nodo_datos.llenar_datos_or(nuevaOr,a,b);
                parser.contId++;
                RESULT = nuevaOr;
                
    :}
    //Expresion a.b;
    |CONCAT:c expresion_regular:a expresion_regular:b
    {:
    
                Nodo nuevaConcat = new Nodo(a,b, ".", parser.contId);
                nodo_datos.llenar_datos_concatenacion(nuevaConcat,a,b);
                parser.contId++;
                RESULT = nuevaConcat;
                System.out.print(c);
    :}
    //Expresion a*;
    |POR:c expresion_regular:a
    {:
    
                Nodo nuevaPor = new Nodo(a,null,c, parser.contId);
                nodo_datos.llenar_datos_aste_y_interr(nuevaPor,a);
                
                parser.contId++;
                RESULT = nuevaPor;
                System.out.println(c);
    :}
    //Expresion a?;
    |INTER:b expresion_regular:a
    {:
        
                Nodo nuevaInter = new Nodo(a,null,b, parser.contId);
                nodo_datos.llenar_datos_aste_y_interr(nuevaInter,a);
                parser.contId++;
                RESULT = nuevaInter;
                
    :}
    //Expresion a+;
    |MAS:b expresion_regular:a
    {:
        
                Nodo nuevaMas = new Nodo(a,null,b, parser.contId);
                nodo_datos.llenar_datos_mas(nuevaMas,a);
                parser.contId++;
                RESULT = nuevaMas;
                
    :}
    //Expresion identificador;
    |LLAVEIZQ IDENTIFICADOR:a LLAVEDER
    {:
    
                parser.numera_hoja++;
                Nodo nuevaIdent = new Nodo(null,null,a, parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaIdent;
                System.out.print(a);
                
    :}
    //Expresion CADENA;
    |CADENA:a
    {:
        
                parser.numera_hoja++;
                Nodo nuevaGuion = new Nodo(null, null,"\\\""+a+"\\\"", parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaGuion;
                System.out.print(a);
    :}  
    //Expresion ESPECIAL1 \';
    |SPECIAL1:a
    {:
        
                parser.numera_hoja++;
                Nodo nuevaGuion = new Nodo(null, null,a, parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaGuion;
                System.out.print(a);
    :}  
    //Expresion ESPECIALES \";
    |SPECIAL2:a
    {:
        
                parser.numera_hoja++;
                Nodo nuevaGuion = new Nodo(null, null,a, parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaGuion;
                System.out.print(a);
    :}  
    //Expresion ESPECIALES \n;
    |SPECIAL3:a
    {:
        
                parser.numera_hoja++;
                Nodo nuevaGuion = new Nodo(null, null,"\\"+a, parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaGuion;
                System.out.print(a);
    :}  
;

