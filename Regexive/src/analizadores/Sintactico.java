
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import arbol.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\003\005\000\002\002" +
    "\013\000\002\002\014\000\002\002\013\000\002\002\014" +
    "\000\002\002\013\000\002\002\014\000\002\002\013\000" +
    "\002\002\014\000\002\002\011\000\002\002\012\000\002" +
    "\002\011\000\002\002\012\000\002\002\011\000\002\002" +
    "\012\000\002\002\007\000\002\002\010\000\002\002\007" +
    "\000\002\002\006\000\002\002\007\000\002\002\003\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\005\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\050\004\001\002\000\010\003\011\005" +
    "\012\014\007\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\034\160\001\002\000\012\005" +
    "\047\014\045\021\050\052\046\001\002\000\012\005\uffec" +
    "\014\uffec\021\uffec\052\uffec\001\002\000\006\031\014\034" +
    "\013\001\002\000\004\004\043\001\002\000\004\040\015" +
    "\001\002\000\026\004\016\011\022\012\021\013\020\026" +
    "\023\027\025\032\024\041\030\050\026\051\027\001\002" +
    "\000\030\004\uffc2\011\uffc2\012\uffc2\013\uffc2\026\uffc2\027" +
    "\uffc2\032\uffc2\035\uffc2\041\uffc2\050\uffc2\051\uffc2\001\002" +
    "\000\004\035\042\001\002\000\030\004\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\026\uffbf\027\uffbf\032\uffbf\035\uffbf\041\uffbf" +
    "\050\uffbf\051\uffbf\001\002\000\030\004\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\026\uffc0\027\uffc0\032\uffc0\035\uffc0\041\uffc0" +
    "\050\uffc0\051\uffc0\001\002\000\030\004\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\026\uffc1\027\uffc1\032\uffc1\035\uffc1\041\uffc1" +
    "\050\uffc1\051\uffc1\001\002\000\026\004\016\011\022\012" +
    "\021\013\020\026\023\027\025\032\024\041\030\050\026" +
    "\051\027\001\002\000\026\004\016\011\022\012\021\013" +
    "\020\026\023\027\025\032\024\041\030\050\026\051\027" +
    "\001\002\000\026\004\016\011\022\012\021\013\020\026" +
    "\023\027\025\032\024\041\030\050\026\051\027\001\002" +
    "\000\004\005\034\001\002\000\026\004\016\011\022\012" +
    "\021\013\020\026\023\027\025\032\024\041\030\050\026" +
    "\051\027\001\002\000\026\004\016\011\022\012\021\013" +
    "\020\026\023\027\025\032\024\041\030\050\026\051\027" +
    "\001\002\000\030\004\uffc5\011\uffc5\012\uffc5\013\uffc5\026" +
    "\uffc5\027\uffc5\032\uffc5\035\uffc5\041\uffc5\050\uffc5\051\uffc5" +
    "\001\002\000\026\004\016\011\022\012\021\013\020\026" +
    "\023\027\025\032\024\041\030\050\026\051\027\001\002" +
    "\000\030\004\uffc8\011\uffc8\012\uffc8\013\uffc8\026\uffc8\027" +
    "\uffc8\032\uffc8\035\uffc8\041\uffc8\050\uffc8\051\uffc8\001\002" +
    "\000\004\052\035\001\002\000\030\004\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\026\uffc3\027\uffc3\032\uffc3\035\uffc3\041\uffc3" +
    "\050\uffc3\051\uffc3\001\002\000\030\004\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\026\uffc4\027\uffc4\032\uffc4\035\uffc4\041\uffc4" +
    "\050\uffc4\051\uffc4\001\002\000\026\004\016\011\022\012" +
    "\021\013\020\026\023\027\025\032\024\041\030\050\026" +
    "\051\027\001\002\000\030\004\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\026\uffc7\027\uffc7\032\uffc7\035\uffc7\041\uffc7\050\uffc7" +
    "\051\uffc7\001\002\000\030\004\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\026\uffc6\027\uffc6\032\uffc6\035\uffc6\041\uffc6\050\uffc6" +
    "\051\uffc6\001\002\000\012\005\ufff1\014\ufff1\021\ufff1\052" +
    "\ufff1\001\002\000\004\035\044\001\002\000\012\005\uffee" +
    "\014\uffee\021\uffee\052\uffee\001\002\000\004\034\063\001" +
    "\002\000\004\002\000\001\002\000\006\031\054\034\055" +
    "\001\002\000\004\021\051\001\002\000\004\021\052\001" +
    "\002\000\004\021\053\001\002\000\012\005\uffef\014\uffef" +
    "\021\uffef\052\uffef\001\002\000\004\040\060\001\002\000" +
    "\004\004\056\001\002\000\004\035\057\001\002\000\012" +
    "\005\uffed\014\uffed\021\uffed\052\uffed\001\002\000\026\004" +
    "\016\011\022\012\021\013\020\026\023\027\025\032\024" +
    "\041\030\050\026\051\027\001\002\000\004\035\062\001" +
    "\002\000\012\005\ufff0\014\ufff0\021\ufff0\052\ufff0\001\002" +
    "\000\004\005\064\001\002\000\004\031\065\001\002\000" +
    "\004\040\066\001\002\000\102\006\071\007\114\010\076" +
    "\015\130\016\110\017\101\020\132\021\127\022\121\023" +
    "\115\024\077\025\124\026\073\030\111\031\112\033\106" +
    "\034\070\035\125\036\113\037\100\040\117\041\131\042" +
    "\105\043\123\044\120\045\107\046\116\047\074\050\122" +
    "\051\104\052\075\053\072\001\002\000\006\030\155\035" +
    "\156\001\002\000\006\035\uffd8\053\uffd8\001\002\000\010" +
    "\030\uffea\035\uffea\053\152\001\002\000\006\035\uffc9\053" +
    "\uffc9\001\002\000\006\035\uffdc\053\uffdc\001\002\000\006" +
    "\035\uffcd\053\uffcd\001\002\000\006\035\uffca\053\uffca\001" +
    "\002\000\010\030\uffe6\035\uffe6\053\147\001\002\000\006" +
    "\035\uffde\053\uffde\001\002\000\006\035\uffd5\053\uffd5\001" +
    "\002\000\006\035\uffe3\053\uffe3\001\002\000\004\053\144" +
    "\001\002\000\006\030\141\035\142\001\002\000\006\035" +
    "\uffcb\053\uffcb\001\002\000\006\035\uffd2\053\uffd2\001\002" +
    "\000\006\035\uffd9\053\uffd9\001\002\000\006\035\uffcf\053" +
    "\uffcf\001\002\000\006\035\uffe4\053\uffe4\001\002\000\006" +
    "\035\uffdb\053\uffdb\001\002\000\006\035\uffda\053\uffda\001" +
    "\002\000\006\035\uffd6\053\uffd6\001\002\000\010\030\uffe8" +
    "\035\uffe8\053\136\001\002\000\006\035\uffdf\053\uffdf\001" +
    "\002\000\006\035\uffce\053\uffce\001\002\000\006\035\uffd4" +
    "\053\uffd4\001\002\000\006\035\uffd0\053\uffd0\001\002\000" +
    "\006\035\uffe0\053\uffe0\001\002\000\006\035\uffcc\053\uffcc" +
    "\001\002\000\006\035\uffd1\053\uffd1\001\002\000\006\035" +
    "\uffdd\053\uffdd\001\002\000\006\035\uffd7\053\uffd7\001\002" +
    "\000\006\030\133\035\134\001\002\000\006\035\uffe1\053" +
    "\uffe1\001\002\000\006\035\uffe5\053\uffe5\001\002\000\006" +
    "\035\uffd3\053\uffd3\001\002\000\006\035\uffe2\053\uffe2\001" +
    "\002\000\004\007\135\001\002\000\012\005\ufff4\014\ufff4" +
    "\021\ufff4\052\ufff4\001\002\000\006\030\uffe9\035\uffe9\001" +
    "\002\000\004\007\137\001\002\000\004\035\140\001\002" +
    "\000\012\005\ufffc\014\ufffc\021\ufffc\052\ufffc\001\002\000" +
    "\004\006\143\001\002\000\012\005\ufff6\014\ufff6\021\ufff6" +
    "\052\ufff6\001\002\000\006\030\uffeb\035\uffeb\001\002\000" +
    "\074\015\130\016\110\017\101\020\132\021\127\022\121" +
    "\023\115\024\077\025\124\026\073\030\111\031\112\033" +
    "\106\034\070\035\125\036\113\037\100\040\117\041\131" +
    "\042\105\043\123\044\120\045\107\046\116\047\074\050" +
    "\122\051\104\052\075\053\072\001\002\000\004\035\146" +
    "\001\002\000\012\005\ufff8\014\ufff8\021\ufff8\052\ufff8\001" +
    "\002\000\004\010\150\001\002\000\004\035\151\001\002" +
    "\000\012\005\ufffa\014\ufffa\021\ufffa\052\ufffa\001\002\000" +
    "\004\006\153\001\002\000\004\035\154\001\002\000\012" +
    "\005\ufffe\014\ufffe\021\ufffe\052\ufffe\001\002\000\004\010" +
    "\157\001\002\000\012\005\ufff2\014\ufff2\021\ufff2\052\ufff2" +
    "\001\002\000\006\030\uffe7\035\uffe7\001\002\000\004\005" +
    "\161\001\002\000\004\031\162\001\002\000\004\040\163" +
    "\001\002\000\102\006\165\007\171\010\166\015\130\016" +
    "\110\017\101\020\132\021\127\022\121\023\115\024\077" +
    "\025\124\026\073\030\111\031\112\033\106\034\070\035" +
    "\125\036\113\037\100\040\117\041\131\042\105\043\123" +
    "\044\120\045\107\046\116\047\074\050\122\051\104\052" +
    "\075\053\072\001\002\000\006\030\155\035\211\001\002" +
    "\000\010\030\uffea\035\uffea\053\206\001\002\000\010\030" +
    "\uffe6\035\uffe6\053\203\001\002\000\004\053\200\001\002" +
    "\000\006\030\141\035\177\001\002\000\010\030\uffe8\035" +
    "\uffe8\053\174\001\002\000\006\030\133\035\173\001\002" +
    "\000\012\005\ufff5\014\ufff5\021\ufff5\052\ufff5\001\002\000" +
    "\004\007\175\001\002\000\004\035\176\001\002\000\012" +
    "\005\ufffd\014\ufffd\021\ufffd\052\ufffd\001\002\000\012\005" +
    "\ufff7\014\ufff7\021\ufff7\052\ufff7\001\002\000\074\015\130" +
    "\016\110\017\101\020\132\021\127\022\121\023\115\024" +
    "\077\025\124\026\073\030\111\031\112\033\106\034\070" +
    "\035\125\036\113\037\100\040\117\041\131\042\105\043" +
    "\123\044\120\045\107\046\116\047\074\050\122\051\104" +
    "\052\075\053\072\001\002\000\004\035\202\001\002\000" +
    "\012\005\ufff9\014\ufff9\021\ufff9\052\ufff9\001\002\000\004" +
    "\010\204\001\002\000\004\035\205\001\002\000\012\005" +
    "\ufffb\014\ufffb\021\ufffb\052\ufffb\001\002\000\004\006\207" +
    "\001\002\000\004\035\210\001\002\000\012\005\uffff\014" +
    "\uffff\021\uffff\052\uffff\001\002\000\012\005\ufff3\014\ufff3" +
    "\021\ufff3\052\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\003\004\001\001\000\004\002\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\040\001\001" +
    "\000\004\004\036\001\001\000\004\004\035\001\001\000" +
    "\002\001\001\000\004\004\031\001\001\000\004\004\030" +
    "\001\001\000\002\001\001\000\004\004\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\102\006\125" +
    "\007\066\010\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\167\006\171\007\163\010\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     //mis variables
      public static Anulabilidad nodo_datos = new Anulabilidad();
     //-------------------------------------
     
     public static String nombre_dot= "-1";
     public static int numera_hoja = 0;
     public static int contId=1;
     public static Nodo Raiz;
    
     public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("src//imagenes//" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=record]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
          
            String dotPath="dot";
            //dirección del archivo dot
            String fileInputPath = "src//imagenes//"+ nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "src//imagenes//" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            //dot -Tjpg filename.dot -o outfile.jpg


            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }





//---------------------------------------------------    
/**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Fila " + (s.right) +" Columna "+s.left+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.right)+ " Columna "+s.left+". Componente " + s.value + " no reconocido."); 
    }  
    
   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= bloque EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // bloque ::= LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RLETRAMIN ALCANCE RLETRAMIN PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RLETRAMIN ALCANCE RLETRAMIN PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RLETRAMAY ALCANCE RLETRAMAY PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RLETRAMAY ALCANCE RLETRAMAY PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RNUMERO ALCANCE RNUMERO PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA RNUMERO ALCANCE RNUMERO PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA simbolos ALCANCE simbolos PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA simbolos ALCANCE simbolos PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA letras_min PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA letras_min PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA letras_may PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA letras_may PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA lista_numeros PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= instrucciones RCONJ DOSPUNTOS IDENTIFICADOR MENOS FLECHA lista_numeros PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones ::= IDENTIFICADOR MENOS FLECHA expresion_regular PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            parser.nombre_dot=a;
            parser.numera_hoja++;
            Nodo aceptacion = new Nodo(null,null, "#", parser.contId+2,parser.numera_hoja,"N");
            Nodo concatenacion = new Nodo(b,aceptacion, ".", parser.contId+1);
            nodo_datos.llenar_datos_concatenacion(concatenacion,b,aceptacion);
            
            
            
            //parser.Raiz = concatenacion;
            System.out.println("Aqui en primer: Nomde_dot=: "+parser.nombre_dot);
            graficarArbol(concatenacion,parser.nombre_dot);
            parser.contId =0;
            parser.numera_hoja =0;
            //parser.nombre_dot = "";
            RESULT=concatenacion;
     
            // System.out.println("Nomde_dot=: "+parser.nombre_dot);
            //RESULT=b;
    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones ::= instrucciones IDENTIFICADOR MENOS FLECHA expresion_regular PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            parser.nombre_dot=a;
            parser.numera_hoja++;
            Nodo aceptacion = new Nodo(null,null, "#", parser.contId+2,parser.numera_hoja,"N");
            Nodo concatenacion = new Nodo(b,aceptacion, ".", parser.contId+1);
            nodo_datos.llenar_datos_concatenacion(concatenacion,b,aceptacion);
            
            
            
            //parser.Raiz = concatenacion;
            System.out.println("Aqui en primer: Nomde_dot=: "+parser.nombre_dot);
            graficarArbol(concatenacion,parser.nombre_dot);
            parser.contId =0;
            parser.numera_hoja =0;
            //parser.nombre_dot = "";
            RESULT=concatenacion;
     
            // System.out.println("Nomde_dot=: "+parser.nombre_dot);
            //RESULT=b;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones ::= instrucciones DPORCENTAJE DPORCENTAJE DPORCENTAJE DPORCENTAJE 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrucciones ::= IDENTIFICADOR DOSPUNTOS CADENA PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucciones ::= instrucciones IDENTIFICADOR DOSPUNTOS CADENA PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= error 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // letras_min ::= letras_min COMA RLETRAMIN 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("letras_min",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // letras_min ::= RLETRAMIN 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("letras_min",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // letras_may ::= letras_may COMA RLETRAMAY 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("letras_may",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // letras_may ::= RLETRAMAY 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("letras_may",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_numeros ::= lista_numeros COMA RNUMERO 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_numeros ::= RNUMERO 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_numeros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simbolos ::= ADMI 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simbolos ::= COMILLA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simbolos ::= NUME 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simbolos ::= DOLAR 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simbolos ::= DPORCENTAJE 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simbolos ::= ANDD 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simbolos ::= COMSIMPLE 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simbolos ::= PABIERTA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simbolos ::= PCERRADA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simbolos ::= POR 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simbolos ::= COMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simbolos ::= MENOS 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simbolos ::= DIV 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simbolos ::= DOSPUNTOS 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simbolos ::= PTCOMA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simbolos ::= MENOR 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simbolos ::= IGUAL 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simbolos ::= FLECHA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simbolos ::= INTER 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simbolos ::= ARROBA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simbolos ::= CORABIERTO 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simbolos ::= BARINVERTIDA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simbolos ::= CORCERRADO 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simbolos ::= POTENCIA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simbolos ::= GBAJO 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simbolos ::= LLAVEIZQ 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simbolos ::= OR 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simbolos ::= LLAVEDER 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simbolos ::= ALCANCE 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_regular ::= OR expresion_regular expresion_regular 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        //Expresion a|b;
                Nodo nuevaOr = new Nodo(a, b, "\\|", parser.contId);
                nodo_datos.llenar_datos_or(nuevaOr,a,b);
                parser.contId++;
                RESULT = nuevaOr;
                
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_regular ::= CONCAT expresion_regular expresion_regular 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    
                Nodo nuevaConcat = new Nodo(a,b, ".", parser.contId);
                nodo_datos.llenar_datos_concatenacion(nuevaConcat,a,b);
                parser.contId++;
                RESULT = nuevaConcat;
                System.out.print(c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_regular ::= POR expresion_regular 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    
                Nodo nuevaPor = new Nodo(a,null,c, parser.contId);
                nodo_datos.llenar_datos_aste_y_interr(nuevaPor,a);
                
                parser.contId++;
                RESULT = nuevaPor;
                System.out.println(c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_regular ::= INTER expresion_regular 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
                Nodo nuevaInter = new Nodo(a,null,b, parser.contId);
                nodo_datos.llenar_datos_aste_y_interr(nuevaInter,a);
                parser.contId++;
                RESULT = nuevaInter;
                
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_regular ::= MAS expresion_regular 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
                Nodo nuevaMas = new Nodo(a,null,b, parser.contId);
                nodo_datos.llenar_datos_mas(nuevaMas,a);
                parser.contId++;
                RESULT = nuevaMas;
                
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_regular ::= LLAVEIZQ IDENTIFICADOR LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    
                parser.numera_hoja++;
                Nodo nuevaIdent = new Nodo(null,null,a, parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaIdent;
                System.out.print(a);
                
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion_regular ::= CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
                parser.numera_hoja++;
                Nodo nuevaGuion = new Nodo(null, null,"\\\""+a+"\\\"", parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaGuion;
                System.out.print(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion_regular ::= SPECIAL1 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
                parser.numera_hoja++;
                Nodo nuevaGuion = new Nodo(null, null,a, parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaGuion;
                System.out.print(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_regular ::= SPECIAL2 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
                parser.numera_hoja++;
                Nodo nuevaGuion = new Nodo(null, null,a, parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaGuion;
                System.out.print(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_regular ::= SPECIAL3 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
                parser.numera_hoja++;
                Nodo nuevaGuion = new Nodo(null, null,"\\"+a, parser.contId,parser.numera_hoja,"N");
                parser.contId++;
                RESULT = nuevaGuion;
                System.out.print(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_regular",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
